import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat
import com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat

plugins {
    id 'java'
    id 'scala'
    id 'idea'
    id 'maven-publish'
    id 'com.github.sherter.google-java-format' version '0.8'
    id 'com.github.johnrengelman.shadow' version '4.0.3'
}

group 'io.tiledb'
version '0.11.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

project.ext {
    cachedBreezeVersion = null
    sparkVersion = System.getProperty("spark.version", "2.4.5")
    scalaVersion = System.getProperty("scala.version", "2.11.12")
    scalaMajorVersion = (scalaVersion =~ /^\d+.\d+/)[0]
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
    test {
        java {
            srcDir 'test/java'
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile group: 'org.scalanlp', name: 'breeze_2.11', version: '1.0'
    compile group: 'org.ow2.asm', name: 'asm-tree', version: '9.0'
    compile group: 'org.ow2.asm', name: 'asm-util', version: '9.0'

    implementation 'org.scala-lang:scala-library:' + scalaMajorVersion

    testImplementation 'org.scala-lang:scala-library:' + scalaMajorVersion

    compileOnly 'org.apache.spark:spark-sql_' + scalaMajorVersion + ':' + sparkVersion
    compileOnly 'org.apache.spark:spark-mllib_' + scalaMajorVersion + ':' + sparkVersion
    compileOnly 'org.apache.spark:spark-core_' + scalaMajorVersion + ':' + sparkVersion

    compile group: 'io.tiledb', name: 'tiledb-vcf-java', version: version
    compile 'com.amazonaws:aws-java-sdk:1.11.650'

    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile group: 'is.hail', name: 'hail', version: 'main'

    testCompile group: 'org.scalatest', name: 'scalatest_2.11', version: '3.2.3'

    testCompile 'org.testng:testng:6.8.21'

    compile group: 'com.github.samtools', name: 'htsjdk', version: '2.23.0'
}

// Make sure all the compileOnly packagse (spark) are included for testing
configurations {
    testCompile.extendsFrom compileOnly
}

test {
    minHeapSize = "8192m"
    maxHeapSize = "8192m"
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams true
    }

    maxHeapSize = "8g"

    finalizedBy('testNG')
}

task testNG(type: Test) {
    useTestNG() {
    }

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams true
    }
}

shadowJar {
    zip64 true
}

tasks.jar.configure {
    classifier = 'default'
}

tasks.shadowJar.configure {
    classifier = null
}

task pathConfig {
    ext.root = file("../..").absolutePath
    ext.vcfJavaPath = "${root}/apis/java"
}

task makeVCFJava(type: Exec) {
    workingDir = "${pathConfig.vcfJavaPath}"
    executable = "./gradlew"
    args "clean"
    args "assemble"
    args "publishToMavenLocal"
    if (project.hasProperty("FORCE_EXTERNAL_HTSLIB")) {
        args "-PFORCE_EXTERNAL_HTSLIB=${project.property('FORCE_EXTERNAL_HTSLIB')}"
    }
    if (project.hasProperty("FORCE_EXTERNAL_TILEDB")) {
        args "-PFORCE_EXTERNAL_TILEDB=${project.property('FORCE_EXTERNAL_TILEDB')}"
    }
    if (project.hasProperty("DOWNLOAD_TILEDB_PREBUILT")) {
        args "-PDOWNLOAD_TILEDB_PREBUILT=${project.property('DOWNLOAD_TILEDB_PREBUILT')}"
    }
    if (project.hasProperty("CMAKE_BUILD_TYPE")) {
        args "-PCMAKE_BUILD_TYPE=${project.property('CMAKE_BUILD_TYPE')}"
    }
}

task format(type: GoogleJavaFormat) {
    source = sourceSets*.allJava
    include '**/*.java'
}

task checkFormat(type: VerifyGoogleJavaFormat) {
    source = sourceSets*.allJava
    include '**/*.java'
    ignoreFailures false
}

allprojects {
    afterEvaluate {
        for(def task in it.tasks)
            if(task != rootProject.tasks.makeVCFJava)
                task.dependsOn makeVCFJava
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar
            artifact javadocJar
        }
	shadow(MavenPublication) { publication ->
	    project.shadow.component(publication)
        }
    }
}
