plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'com.github.sherter.google-java-format' version '0.7.1'
    id 'com.github.johnrengelman.shadow' version '4.0.3'
    id 'com.palantir.git-version' version '0.12.3'
}

group 'io.tiledb'
version gitVersion()

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
    test {
        java {
            srcDir 'test/java'
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile 'org.apache.spark:spark-sql_2.12:2.4.3'
    compile 'org.apache.spark:spark-core_2.12:2.4.3'
    compile group: 'io.tiledb', name: 'tiledb-vcf-java', version: gitVersion()
    compile 'com.amazonaws:aws-java-sdk:1.11.650'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

test {
    testLogging {
        showStandardStreams = true
    }
}

shadowJar {
    zip64 true
}

import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat
import com.github.sherter.googlejavaformatgradleplugin.VerifyGoogleJavaFormat

task pathConfig {
    ext.root = file("../..").absolutePath
    ext.vcfJavaPath = "${root}/apis/java"
}

task makeVCFJava(type: Exec) {
    workingDir = "${pathConfig.vcfJavaPath}"
    executable = "./gradlew"
    args "clean"
    args "assemble"
    args "publishToMavenLocal"
}

task format(type: GoogleJavaFormat) {
    source = sourceSets*.allJava
    include '**/*.java'
}

task checkFormat(type: VerifyGoogleJavaFormat) {
    source = sourceSets*.allJava
    include '**/*.java'
    ignoreFailures false
}

allprojects {
    afterEvaluate {
        for(def task in it.tasks)
            if(task != rootProject.tasks.makeVCFJava)
                task.dependsOn makeVCFJava
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar
            artifact javadocJar
        }
    }
}